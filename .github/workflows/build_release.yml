name: Build and Release

on:
    push:
        tags:
            - "v*" # Trigger on version tags like v1.0.0, v2.1.3, etc.
    workflow_dispatch: # Allow manual trigger

jobs:
    build:
        name: Build for ${{ matrix.target }}
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                include:
                    - target: x86_64-pc-windows-msvc
                      os: windows-latest
                      binary_name: spalk-tech-test.exe
                      archive_name: spalk-tech-test-windows-x64
                    - target: x86_64-unknown-linux-gnu
                      os: ubuntu-latest
                      binary_name: spalk-tech-test
                      archive_name: spalk-tech-test-linux-x64
                    - target: aarch64-unknown-linux-gnu
                      os: ubuntu-latest
                      binary_name: spalk-tech-test
                      archive_name: spalk-tech-test-linux-arm64
                    - target: x86_64-apple-darwin
                      os: macos-latest
                      binary_name: spalk-tech-test
                      archive_name: spalk-tech-test-macos-x64
                    - target: aarch64-apple-darwin
                      os: macos-latest
                      binary_name: spalk-tech-test
                      archive_name: spalk-tech-test-macos-arm64

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: Install cross-compilation tools (Linux ARM64)
              if: matrix.target == 'aarch64-unknown-linux-gnu'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y gcc-aarch64-linux-gnu
                  echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

            - name: Build binary
              run: cargo build --release --target ${{ matrix.target }}

            - name: Create archive (Windows)
              if: matrix.os == 'windows-latest'
              shell: pwsh
              run: |
                  $binary = "target/${{ matrix.target }}/release/${{ matrix.binary_name }}"
                  Compress-Archive -Path $binary -DestinationPath ${{ matrix.archive_name }}

            - name: Create archive (Unix)
              if: matrix.os != 'windows-latest'
              run: |
                  cd target/${{ matrix.target }}/release
                  tar -czf ../../../${{ matrix.archive_name }} ${{ matrix.binary_name }}

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.archive_name }}
                  path: ${{ matrix.archive_name }}

    release:
        name: Create Release
        needs: build
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: ./artifacts

            - name: Move artifacts to release directory
              run: |
                  mkdir -p ./release
                  find ./artifacts -name "*.zip" -o -name "*.tar.gz" | while read file; do
                    mv "$file" ./release/
                  done
                  ls -la ./release

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  files: ./release/*
                  generate_release_notes: true
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
